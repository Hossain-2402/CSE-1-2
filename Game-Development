                                                                                                    Lec-1
                                                                                                    -----


marks dist:
----------
    3 Online [Best 2] - 20:
        - iGraphics
        - struct, memory, dynaic memory alloc
        - struct, memory, dynaic memory alloc

    Project - 40:
        - Periodical Update [10]
        - Periodical Update [10]
        - Periodical Update [10]
        - Report [5]

    Lab final - 20:
        - iGraphics
        - struct, pointer, dynamic memory alloc
    
    Attendance - 20

# Visual studio code 2010/2013 recommanded

#   iInitialize(width, height, "Project Title");

#   iFilledRectangle(margin-left, margin-bottom, width, height);
#   iRectangle(margin-left, margin-bottom, width, height); [Does not fill the ractangle with any color]

#   iFilledCircle(margin-left,margin-bottom,radius); [margin-bottom indicates how high the center of the circle will be ]
#   iSetColor(RED, GREEN, BLUE);

#   glLineWidth(5); [controls the border of the box]
#   iEllipse(300,300,width,heigt);

#   iFilledPolygon(x,y,3); [x,y are variable] [ 3 represents the number of variables to use from each array ]
#   iPolygon(x,y,3); [x,y are variable] [ 3 represents the number of variables to use from each array ] 

#   iText(100,200,"CSE 1200",GLUT_BITMAP_HELVETICA_18); [Last parameter is the font size]
	-sprintf_s(str,"Scores: %d", score); [it makes str = "Scores: 50", if the score = 50]

#   iPoint(200,200,10); [margin-bottom indicates how high the center of the circle will be ]

#   iLine(10,20,100,200); 

# The iSetColor() controls the color of its' imidiate after iInitialize()

    iSetColor()
    iFilledRectangle()

  -----------
| Class Work |
  -----------
  
void iDraw()
{

//	---------------------------------------------------------------------------------------------
//	iSetColor(255, 255, 255);
//	iFilledRectangle(250, 200, 50, 100);

	
//	iSetColor(77, 77, 77);
//	glLineWidth(5);
//	iRectangle(50, 50, 50, 50);
//	---------------------------------------------------------------------------------------------
	
//	iSetColor(255, 255, 255);
//	iFilledCircle(250,250,20);

//	iSetColor(255, 255, 255);
//	iFilledCircle(25,25,20);
//	---------------------------------------------------------------------------------------------

//	iEllipse(300,300,100,50);	
//	---------------------------------------------------------------------------------------------

//	iSetColor(128,0,128);
//	double x[] = {200,250,300,270,200};
//	double y[] = {200,250,200,150,150};
	
//	double x[] = {200,250,300};
//	double y[] = {200,250,200};
//	iFilledPolygon(x,y,3);
//	---------------------------------------------------------------------------------------------

//	iSetColor(255,255,255);
//	iText(100,200,"CSE 1200",GLUT_BITMAP_HELVETICA_18);
//	---------------------------------------------------------------------------------------------

//	iSetColor(255,255,255);

//	char str[20];

//	int score = 1500;
//	sprintf_s(str,"Scores: %d", score);
//	iText(100,200,str,GLUT_BITMAP_HELVETICA_18);
//	---------------------------------------------------------------------------------------------

//	iSetColor(255,255,255);
//	iPoint(200,200,10);
//	---------------------------------------------------------------------------------------------

//	iSetColor(255,255,255);
//	iLine(10,20,100,200);

  -----
| Extra |
  -----

This is to add an image in the window (height,width can be controlled)
	int vh = 600;
	int vw = 400;

	unsigned int texture = iLoadImage("pixels.jpg");

	iShowImage(0, 0, 0.2*vw, 0.2*vh, texture);


}


                                                                                                    Lec-2
                                                                                                    -----
                                                                                                    
  -----------
| Class Note |
  -----------

# Rotation: 
    	iSetColor(255, 255, 255);
    	iRotate(200,50,45);
    	iFilledRectangle(200, 50, 100, 100);
    	iUnRotate();


  
  -----------
| Class Work |
  -----------

  
//	iSetColor(255, 255, 255);
//	iFilledRectangle(x, 10, 100, 100);

//	x+=0.01;
//	if(x >= 600) x = -10;
//	---------------------------------------------------------------------------------------------

//void iPassiveMouseMove(int mx, int my)
//{
//	printf("mx = %d my = %d\n", mx,my);
//}
//	---------------------------------------------------------------------------------------------

//void iMouseMove(int mx, int my)
//{
//	printf("This is for drag and drop");
//}
//	---------------------------------------------------------------------------------------------

//void iMouse(int button, int state, int mx, int my)
//{
	
//	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
//	{
//		printf("mx = %d my = %d\n", mx,my);
		
//	}
	
	
//	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
//	{
//		
//	}
}
//	---------------------------------------------------------------------------------------------

//	iSetColor(255, 255, 255);
//	iRotate(0,0,45);
//	iFilledRectangle(200, 50, 100, 100);
//	iUnRotate();
//	---------------------------------------------------------------------------------------------


//	iSetColor(255, 255, 255);
//	iRotate(200,50,45);
//	iFilledRectangle(200, 50, 100, 100);
//	iUnRotate();
//	---------------------------------------------------------------------------------------------


//int rgb[3];

//void iMouse(int button, int state, int mx, int my)
//{
	
//	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
//	{
//		iGetPixelColor(mx,my,rgb);
//		printf("R: %d, G: %d, B: %d\n",rgb[0],rgb[1],rgb[2]);
		
//	}
	
	
//	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
//	{
		
//	}
//}
//	---------------------------------------------------------------------------------------------



// iDelayMS(10);





                                                                                                    Lec-2
                                                                                                    -----
                                                                                                    
  -----------
| Class Note |
  -----------








  -----------
| Class Work |
  -----------








                                                                                                    Lec-3
                                                                                                    -----




  -----------
| Class Note |
  -----------


	# "namespace" handles the conflict resolution
	# "::" = scope resolution operator

	# We can create a method inside a  Structure in cpp





  -----------
| Class Work |
  -----------
	
	#include<iostream>
	
	using namespace std;
	
	//namespace reno{
	//    double price;
	//}
	//
	//using namespace saha{
	//    double price;
	//}
	
	struct Student{
	    string name;
	    float cgpa;
	    int id;
	
	    void print(){
	        cout << name << endl << cgpa << endl << id;
	    }
	};
	
	//void printDetails(Student s){
	//    cout << s.name << endl << s.cgpa << endl << s.id;
	//}
	
	//Student make_student(string name, double cgpa, int id){
	//
	//    Student new_student = {name,cgpa,id};
	//
	//    return new_student;
	//}
	
	
	//void increase_cg(Student x[], int s ){
	//    for(int i=0;i<s;i++){
	//        x[i].cgpa += 0.25;
	//    }
	//}
	
	int main(){
	
	//
	//    double price;
	//    reno::price = 3.5;
	//    price = 6.7;
	//    cout << reno::price << " " << price;
	//-------------------------------------------------------------------------------------
	
	//
	//    price = 3.5;
	//
	//    cout << price; // this is the price variable of the "saha" scope [since we wrote "using"]
	//-------------------------------------------------------------------------------------
	
	//
	//    Student s1 = {"Hossain",2,2};
	//    cout << s1.name;
	//-------------------------------------------------------------------------------------
	
	//    Student s1 = {"Hossain",2,2};
	//    printDetails(s1);
	//-------------------------------------------------------------------------------------
	
	
	//    Student new_student = make_student("Hossain",3.5,17);
	//    cout << new_student.name << endl << new_student.cgpa << endl << new_student.id;
	//-------------------------------------------------------------------------------------


	//    Student s1[2] = {
	//        {"Hossain",3.5,17},
	//        {"Zayed",3.5,25}
	//    };
	//
	//    increase_cg(s1,2);
	//
	//    cout << s1[0].cgpa;
	//-------------------------------------------------------------------------------------
	
	
	//    Student s1 = {"Hossain",2,2};
	//    Student *ptr ;
	//
	//    ptr = &s1;
	//
	//    cout << ptr->name;
		
		
		
		
	}



                                                                                                    Lec-4
                                                                                                    -----

# variables use er upor marks thakbe 


# Try to use as much "VARIABLE" as it is possible 
# make const variables 

# To create header file:
	Header file > majher section theke header file > extention = .hpp

 ------------
| class work |
 ------------


#include<iostream>

using namespace std;


struct Student{
    string name;
    float cgpa;
    int id;

    Student(){
        name = "Hossain";
        cgpa = 3.6;
        id = 17;
    }


    Student(string name, float cgpa, int id){
        this->name = name;
        this->cgpa = cgpa;
        this->id = id;
    }
};

int main(){


    Student student("Hossain",3.8,17);

//    making an array of a class:

//    Student s1[2] = {Student("a",3.0,10), Student("a",3.0,10), Student("a",3.0,10),};

//    Online hobe array er upor
}




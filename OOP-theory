                                                                            Lec-1
                                                                            -----


Books:
 	Java : The complete Reference, 11th edition [Theoritical ]
		-Herbert schildt
	Head First Java, 2nd Edition
		-Kathy Sierra

Classroom code : cpzm2j7p



# source code ---> compiler -----> machine code 

# C++: Hello.c 	 ---> compiler ---> Hello.exe

# java: Hello.java ---> compiler  ---> Hello.class(byte code) ---> JVM [Java virtual machine] ---> output 

# compile once, run everywhere



                                                                            Lec-2
                                                                            -----
# JVM's drawback : "speed" kom hoy. Because it goes through some extra steps

# Encapsulation :
	Binds data and code.
	It enables the security of the data and code. 

# Inheritance :
	Inherits attributes from one class to another.
	Less code. 

# Polymorphism :
	One interface multiple methods.
	A single interface can control multiple operations.
	If a method substitutes multiple method's funciton. 

* fabs() = makes absolute value for "float" datatype
* labs() = makes absolute value for "long" datatype


# Class and Object :
  ````````````````

	one class -> multiple object 


	Student s1 = new Student("Hossain", 17, 1.1); // here 's1' is an object 



                                                                            Lec-3
                                                                            -----

# The class and and object has to indicate the same "physical thing"




# Class:
	- A class is a template for an object
	- Define a new data type



# Syntax : 
	
	class classname{
		type-instance variable1;
		.
		.
		.
		type-instance variableN;


		type methodname1(parameter-list){

		}
		.
		.
		.
		.
		type methodname(parameter-list){
			
		}

	}

	# Example :
		
		Class:
		------
		class Vechicle{
			int engine;
			int top_speed;

			int move(engine){
				....
			}
		}

		Object:
		-------
		Vechicle car = new Vehicle();




# Everything(code/manipulation) in java has to be inside a METHOD


class Demo{
		public static void main(String args[]){
				Box matchBox = new Box();
				matchBox.width = 2;
				matchBox.depth = 1;
				matchBox.height = 1.5;
		}
}



H.W : make an object of Box class 



                                                                            Lec-4
                                                                            -----

# Assignment process & retreval process


# Method:

	 class Box{
			double height;
			double width;
			double depth;

			double calculateVolume(){
					double volume = height * width * depth;
					return volume;
			}
	}

	class BoxDemo(){
		public static void main(String args[]){
				Box box = new Box();
				box.height = 10;
				box.width = 10;
				box.depth = 10;

				System.out.println( "Volume is : " + box.calculateVolume() );
		}
	}

# Making Assignment operation easier : 

	 class Box{
			double height;
			double width;
			double depth;

			double calculateVolume(){
					double volume = height * width * depth;
					return volume;
			}

			void setVariables(double h,double w,double,d){
					height = h;
					width = w;
					depth = d;
			}
	}

	class BoxDemo{
		public static void main(String args[]){
				Box myBox = new Box();

				myBox.setVariables(10,20,50);

		}
	}





                                                                            Lec-5
                                                                            -----



Public keyword: ( Data not secured )
--------------
		class Demo{

				class Box{
						
						double height,width,depth;

						void setVariables(double h, double w, double d){

								if(w<0) width = 0;
								else width = w;

								if(h<0) height = 0;
								else height = h;

								if(d<0) depth = 0;
								else depth = d;
						
						}

				}

			
				public static void main(String args[]){
								Box matchBox = new Box();
								matchBox = setVariables(5,-5,3);

								System.out.println(matchBox.height);
								System.out.println(matchBox.width);
								System.out.println(matchBox.depth);
				}

		}




Private keyword: ( Data secured )
---------------
		class Demo{

				class Box{
						
						private double height,width,depth; // The "private" keyword is introduced
		 
						void setVariables(double h, double w, double d){

								if(w<0) width = 0;
								else width = w;

								if(h<0) height = 0;
								else height = h;

								if(d<0) depth = 0;
								else depth = d;
						
						}

				}

			
				public static void main(String args[]){
								Box matchBox = new Box();
								matchBox = setVariables(5,-5,3);

								System.out.println(matchBox.height); // This line won't work 
								System.out.println(matchBox.width); // This line won't work 
								System.out.println(matchBox.depth); // This line won't work 
				}

		}



Making the code more accessable: 
-------------------------------
		class Demo{

				class Box{
						
						private double height,width,depth; // The "private" keyword is introduced
		 
						void setWidth(double w){						|
								if(w<0) width = 0;						  |		
								else width = w;								  |		
						}																		|
						void setHeight(double h){						|
								if(h<0) weight = 0;						  |				Setter methods
								else weight = w;								|
						}																		|
						void setDepth(double d){						|
								if(d<0) wepth = 0;							|
								else wepth = w;									|
						}																		|





						public double getWidth(){        		|		
									return width;									|
						}																		|
						public double getHeight(){				  |
									return height;								|  		Getter methods
						}																		|
						public double getDepth(){						|
									return depth;									|
						}																		|
				}

			
				public static void main(String args[]){
								Box matchBox = new Box();
								matchBox = setWidth(5);
								matchBox = setHeight(5);
								matchBox = setDepth(5);

								matchBox.getHeight(10);
								matchBox.getWidth(10);
								matchBox.getDepth(10);

								System.out.println(matchBox.getHeight());
								System.out.println(matchBox.getWidth());
								System.out.println(matchBox.getDepth());
				}

		}



Constructor:
-----------

		class Demo{

				class Box{
						
						private double height,width,depth;
		 				
		 				public Box(double d,double w,double h){
								height = h;
								width = w;
								depth = d;		 					
		 				}
		 
						void setWidth(double w){						|
								if(w<0) width = 0;						  |		
								else width = w;								  |		
						}																		|
						void setHeight(double h){						|
								if(h<0) weight = 0;						  |				Setter methods
								else weight = w;								|
						}																		|
						void setDepth(double d){						|
								if(d<0) wepth = 0;							|
								else wepth = w;									|
						}																		|





						public double getWidth(){        		|		
									return width;									|
						}																		|
						public double getHeight(){				  |
									return height;								|  		Getter methods
						}																		|
						public double getDepth(){						|
									return depth;									|
						}																		|		 				

				}

			
				public static void main(String args[]){
								Box matchBox = new Box(5,10,5);
								matchBox.setWidth(50);
								
				}

		}


Parameter naming: (using "This" keyword)
----------------

		class Demo{

				class Box{
						
						private double height,width,depth;
		 				
		 				public Box(double depth,double width,double height){
								this.height = height;
								this.width = width;
								this.depth = depth;		 					
		 				}
		 
				}

			
				public static void main(String args[]){
								Box matchBox = new Box(5,10,5);
								matchBox.setWidth(50);
								
				}

		}
			// This reffers to current object 


                                                                            Lec-6
                                                                            -----






The "new" keyword:
-----------------
		Box b1 = new Box();
		2 parts: 	
		-------
			Box b1;						//  Here "b1" = "reference variable" it is just created. 
			b1 = new Box();		//	1. "new" makes an address/memory space 
												//	2. and then it returns the address to the variable b1;




Shifting objects:
----------------
    Box b1 = new Box(1,1,1); // b1 = 0x00233
    Box b2 = new Box(1,2,3); // b2 = 0x00234

    b1 = b2 ; // b1 = 0x00233

    // the addresss of "b2" gets de-allocated

    // if "b2" is being changed , b1 will be changed too 


Instance variables:
------------------


	 class Box{
			double height;  |
			double width;   | Instance variable [every object has these variables in common]
			double depth;   |

		}



Array:
------
	
	1D:	
	
		int arr[] = new Int[10];
		int[] arr = new Int[10];

	2D:
		
		int towD[][] = new Int[4][5];

		int towD[][] = new Int[4];
		

		towD[0] = new Int[1];
		towD[1] = new Int[2];
		towD[2] = new Int[3];
		towD[3] = new Int[4];



Array: Object
-------------

	class Demo{
			class Student{
					String name,id;
					Student(String name, String id){
							this.name = name;
							this.id = id;
					}

			}
			public static void main(String args[]){

					Scanner sc = new Scanner(System.in);

					Student fall24CSE12[] = new Student[100];		// it is an "array" not object
					int arr[] = new int[100];

					for(int i=0;i<fall24CSE12.length;i++){
							String name = sc.nextLine();
							String id = sc.nextLine();

							fall24CSE12[i] = new Student(name,id); // these are "objects"		
					}
			}
	}


                                                                            Lec-7
                                                                            -----



Method overloading:
------------------

	class Demo{
			class Student{
					String name,id;
					Student(String name, String id){
							this.name = name;
							this.id = id;
					}

					void m(){

					}

					void m(int x){
					
					}

					void m(String s){
					
					}

			}
			public static void main(String args[]){
					Student a = new Student();

					a.m();
					a.m(5);
					a.m("Hossain");
			}
	}




Method overloading: (Constructor)
------------------

	class Demo{
			class Student{
					String name,id;
					Student(String name, String id){
							this.name = name;
							this.id = id;
					}

					Student(){

					}

					Student(String name){
					
					}

					Student(String id){
					
					}

			}
			public static void main(String args[]){
					Student a = new Student();

					Student b = new Student("Hossain");

					Student c = new Student("017");

					Student d = new Student("Hossain","017");

			}
	}



	class Demo{
			class Table{
					double tl;
					double tw;
					double th;

					Table(double tl, double tw,double th){
							this.tl = tl;
							this.tw = tw;
							this.th = th;
					}

					Table(){
							tl = -1;
							tw = -1;
							th = -1;
					}

			}

			class Cartpainter{
			
			}

			public static void main(String args[]){


			
			}
	}



                                                                            Lec-8
                                                                            -----


Table & Carpainter: (Example)
------------------

		class Table{
				double tl;
				double tw;
				double th;

				Table(double tl, double tw,double th){
						this.tl = tl;
						this.tw = tw;
						this.th = th;
				}
		}

		class Cartpainter{
				String name;

				Carpainter(String name){
						this.name = name;
				}

				Table makeATableFromDimension(double tw, double tl, double th){
						Table t = new Table(tw,tl,th);
						return t; // ----------------------------------------------returning object----------------------------------------------
				}

				Table makeATableFromTable(Table t){ // ------------------------t = Reference Variable------------------------

						Table newT = new Table(t.tw, t.tl, t.th);

						return newT; // ----------------------------------------------returning object----------------------------------------------

				}

// Same task is done using method overloading

				Table makeATable(double tw, double tl, double th){
						Table t = new Table(tw,tl,th);
						return t; 
				}

				Table makeATable(Table t){

						Table newT = new Table(t.tw, t.tl, t.th);

						return newT; 
				}


		}

	class Demo{


			public static void main(String args[]){

					Table myOldTable = new Table(1,2,3);

					Carpainter rahim = new Carpainter("Rahim");

					Table myNewTableFromDimension = rahim.makeATableFromDimension(myOldTable.tw, myOldTable.tl, myOldTable.th);

					Table myNewTableFromTable = rahim.makeATableFromTable(myOldTable);

// Same task is done using method overloading

					Table myNewTableFromDimension = rahim.makeATable(myOldTable.tw, myOldTable.tl, myOldTable.th);

					Table myNewTableFromTable = rahim.makeATable(myOldTable);


						
			}
	}




		class Cartpainter{
				String name;

				Carpainter(String name){
						this.name = name;
				}

				Table makeATableFromDimension(double tw, double tl, double th){
						Table t = new Table(tw,tl,th);
						return t; // ----------------------------------------------returning object----------------------------------------------
				}

				Table makeATableFromTable(Table t){ // ------------------------t = Reference Variable------------------------

						Table newT = new Table(t.tw, t.tl, t.th);

						return newT; // ----------------------------------------------returning object----------------------------------------------

				}




Type Convertion:
---------------

		class Convertion{
				void test(double data){
				}

				void test(){
				}


		}

	class Demo{


			public static void main(String args[]){
							
					int x = 10;

					Convertion c = new Convertion();

					c.test();

					c.test(x); // this converts the "int" to "double" [This process does not have any precision error]

			}
	}


                                                                            Lec-9
                                                                            -----


"Static" variable:
-----------------

	Static variable does not depend on the "object"
		class Table{
				double tw; //----------------------------------------instance variable----------------------------------------
				static int s; //----------------------------------------Static variable---------------------------------------- 



				static void m(){
					...
				}


				void m(){
					...
				}

		}

		class Demo{
				public static void main(String args[]){
						Table t = new Table();

						t.tw = 50; 		// ----------------------------------------Object.var----------------------------------------
						Table.s = 50; // ----------------------------------------Class.var----------------------------------------


						// Example : Math.pow(2,5);
				}
		}



"STATIC" variable/method can't call "INSTANCE" variable/method:
--------------------------------------------------------------


		class Table{
				double tw;
				static int s; 



				static void m(){
					tw = 5; //----------------------------------------NOT ALLOWED----------------------------------------
					m();		//----------------------------------------NOT ALLOWED----------------------------------------
				}


				void m(){
					...
				}

		}


		class Demo{
				public static void main(String args[]){

				}
		}




# JVM calls the public static void main() method 

#Making constant variables:
--------------------------
	C: #define int x = 5
	-

	C++: const int x = 5
	----

	JAVA: final int x = 5
	----




                                                                            Lec-10
                                                                            ------





# Inheritance :
--------------

Example :
	Animal 
		- Cow
		- Cat
	# Cow and Cat both inherit the same properties of class Animal

	Inheritance is used to write less code i.e. re-use the code [similar to function]



	Animal (super class)
		- Cow (sub class)
		- Cat (sub class)



	class A{
		int i,j;

		void showij(){
				sout("i and j:" + i + " " + j);
		}
	}

	class B extends A{

			int k;

			void showk(){
					sout("k: "+ k);
			}

			void sum(){
					sout("i+j+k: " + (i+j+k)); // B can access i & j
			}

	}



# "Extends" keyword:
------------------- 

	class Demo{
		
		public static void main(String args[]){
				A sup = new A();

				B sub = new B();

				sup.i =  10;
				sup.j = 20;


				sout(sup.showij()); // prints : 10,20

				sub.i = 7;
				sub.j = 8;
				sub.k = 9;

				sout(sub.sum()); // prints : 7+8+9

				sout(sup.showij()); // prints : 10,20
		}

	}


	Private keyword:
	---------------

	# if any variable of class A is "private",
			class "B will not be able" to access A's variable / A's object







Efficient code: (extending a variable in constructor)
--------------


	 class Box{
			double height;
			double width;
			double depth;
			double wgt;

			Box(){
					...
			}

			Box(double h, double w, double d){
					...
			}


			Box(double wgt){
					this.wgt = wgt;
			}

			double calculateVolume(){
					double volume = height * width * depth;
					return volume;
			}
	}


	Let's say we want to and the variable "weight" in class Box

		

		class BoxWeight extends Box{

				double weight; // Now class "BoxWeight" has 4 instance variables (weight, height, width, depth)

				BoxWeight(double wgt, double h, double w, double d){
					super(wgt);
				}

		}


		class Demo{
				Box a = new Box(1,2,3);

				BoxWeight b = new BoxWeight(10,1,2,3);
		}


Super keyword:
-------------


		class BoxWeight extends Box{

				double weight;

				BoxWeight(double wgt, double h, double w, double d){
					....
				}

				super(h,w,d); // calls the constructor of class "Box"

		}





                                                                            Lec-11
                                                                            ------



Conflict : if SUPER and SUB class both have same variable/methods
---------
	class A{
			int i;
			int j;
	}

	class B{
			int i;

			void show(){
					sout(i); // prints : i variable of class 'B'
					sout(super.i); // prints : i variable of class 'A'
			}
	}


MULTIPLE INHERITANCE : (Not Allowed)
--------------------------------------------

		1 father  - 2 sons [right]
		2 fathers - 1 son  [wrong] -------------------multiple inheritance---------------

	Example:
	-------	
		class A{
				...
		}

		class B{
				...
		}

		class C extends A{
				...
		}

		class C extends B{
				...
		}

Multi level Inheritance: (Allowed)
------------------------

		class A{
				...
		}

		class B extends A{
				...		
		}

		class C extends B{
				...
		}


Overriding:
-----------
		class A{
				void show(){
						...
				}
		}

		class B{
				void show(){
						...
				}

				// does not change the show() of A class
				// both methods of should have "same number of parameters"
				// show() in class A  = show() in class B = "same number of parameter"
		}










                                                                            Lec-12
                                                                            ------




Overriding: (Example)
----------


	class Vehicle{
			void drive(){
					...
			}
	}

	class gasCar extends Vehicle{
			void givingTurnSignal(){
					...
			}
	}

	class electricCar extends Vehicle{
			void drive(){ //[ electric car does not drive like normal cars. Hence editing the drive method of super class ]
					... 
			}
			// drive() method is being overrided 


			void displayInfo(){
					...
			}
	}


Accessing object of sub class from object of super class :
--------------------------------------------------------

		Vehicle v;

		gasCar c = new gasCar();

		v = c; // ----------------------Allowed---------------------
					 //	----------------------super class object can hold sub class object---------------------

		v.drive() // This calls the drive() method of "gasCar" class
		v.displayInfo(); // This willl not work. Because "Vehicle" class does not have the "displayInfo()" method 
		v.givingTurnSignal(); // This willl not work. Because "Vehicle" class does not have the "givingTurnSignal()" method






                                                                            Lec-13
                                                                            ------
Example of Last lecture code: (Dynamic method dispatcher)
----------------------------
	class Bank{
			private String bank_name;
			private double rate;

			Bank(String bank_name, double rate){
					this.bank_name = bank_name;
					this.rate = rate;
			}

			String getBankName(){
					return this.bank_name;
			}
			double getBankRate(){
					return this.rate;
			}


			void whichBankMakesBiggestInteres(Bank b1, Bank b2){
					if(b1.getBankRate() > b2.getBankRate()){
							sout(b1.getBankName());					
					}
					else{
							sout(b2.getBankName());
					}
			}
	}


	class OneBank extends Bank{
			OneBank(String bank_name, double rate){
					super(bank_name,rate);
			}
	}

	class CityBank extends Bank{
			CityBank(String bank_name, double rate){
					super(bank_name,rate);
			}
	}


	class Demo{
			public static void main(String args[]){
					OneBank a = new OneBank("One Bank",10.0);
					CityBank b = new CityBank("City Bank",10.0);

					Bank b1 = a;
					Bank b2 = b;

					Bank.whichBankMakesBiggestInteres(b1, b2);
			}
	}




Example of Last lecture code: (with array)
----------------------------


	class Bank{
			private String bank_name;
			private double rate;

			Bank(String bank_name, double rate){
					this.bank_name = bank_name;
					this.rate = rate;
			}

			String getBankName(){
					return this.bank_name;
			}
			double getBankRate(){
					return this.rate;
			}


			void whichBankMakesBiggestInteres(Bank []bank){
					if(bank[0].getBankRate() > bank[1].getBankRate()){
							sout(bank[0].getBankName());					
					}
					else{
							sout(bank[1].getBankName());
					}
			}
	}


	class OneBank extends Bank{
			OneBank(String bank_name, double rate){
					super(bank_name,rate);
			}
	}

	class CityBank extends Bank{
			CityBank(String bank_name, double rate){
					super(bank_name,rate);
			}
	}


	class Demo{
			public static void main(String args[]){
					OneBank a = new OneBank("One Bank",10.0);
					CityBank b = new CityBank("City Bank",10.0);

					Bank bank[] = new Bank[2];
					bank[0] = a;
					bank[1] = b;

					Bank.whichBankMakesBiggestInteres(bank);
			}
	}







                                                                            Lec-14
                                                                            ------

# Abstract class can't make an "object"

Abstract class:
--------------

abstract class Student{ 							//----------------------------------ABSTRACT keyword------------------------------
			private String name;
			private double totalCgpa;

			Student(String name, double totalCgpa){
					this.name = name;
					this.totalCgpa = totalCgpa;
			}

			String getName(){
					return this.name;
			}
			double getTotalCgpa(){
					return this.totalCgpa;
			}


			abstract double calculateCGPA(); //----------------------------------ABSTRACT keyword------------------------------

			static String compareStudents(Student s1, Student s2){
					String name = "";

					if(s1.calculateCGPA() > s2.calculateCGPA()){
							name = s1.getName();				
					}
					else{
						name = s2.getName();
					}


					return name;
			}
	}




	class CseStudent extends Student{
			CseStudent(String name, double totalCgpa){
					super(name,totalCgpa);
			}

			double calculateCGPA(){      // method Overrided
					return super.getTotalCgpa() / 141.5;
			}
	}

	class ArchStudent extends Student{
			CseStudent(String name, double totalCgpa){
					super(name,totalCgpa);
			}

			double calculateCGPA(){      // method Overrided
					return super.getTotalCgpa() / 152.5;
			}
	}









	class Demo{
			public static void main(String args[]){
					CseStudent a = new CseStudent("Rahim",240.5);
					CityBank b = new CityBank("Karim",255.5);

					Student s1 = a;
					Student s2 = b;

					Student.compareStudents(s1,s2);


			}
	}


                                                                            Lec-15
                                                                            ------


Abstract: (Another example) 
--------

		class Figure{

				abstract double calArea();

				Figure compare(Figure f1, Figure f2){
						if(f1.calArea() > f2.calArea()){
								return f1;
						}
						else{
								return f2;
						}
				}

		}

		class Circle extends Figure{
				double radius;
				Circle(double radius){
					this.radius = radius;
				}

				double calcArea(){
						return Math.pi * Math.pow(this.radius,2);
				}
		}


		class Rectangle extends Figure{
				double length, width;
				Rectangle(double length, width){
					this.length = length;
					this.width = width;
				}

				double calcArea(){
						return this.length * this.width;
				}
		}


		class Square extends Rectangle{
				Square(double length){
					this.length = length;
					this.width = length;
				}

				double calcArea(){
						return this.length * this.length;
				}
		}





                                                                            Lec-16
                                                                            ------





